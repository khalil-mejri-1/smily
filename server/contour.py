# contour.py (ุงูููุฏ ุงููุญุฏูุซ)
import sys
from PIL import Image, ImageFilter, ImageChops
import numpy as np 
import os
from collections import Counter # ุชู ุงูุฅุจูุงุก ุนูููุง ุนูู ุงูุฑุบู ูู ุนุฏู ุงุณุชุฎุฏุงููุง ูุจุงุดุฑุฉ

# ----------------------------------------------------------------------
#                         ุงููุชุบูุฑุงุช ุงูุซุงุจุชุฉ (Constants)
# ----------------------------------------------------------------------

# ุงูุฏูุฉ ุจุงูุจูุตุฉ: ุซุงุจุช ููู ูุญุณุงุจ ุงูุจููุณูุงุช ูู ุงูููููุชุฑุงุช
DPI = 300 

# ุนุชุจุฉ ุฃููุง (ุดูุงููุฉ) ูููุต ุงูุฃููู
ALPHA_THRESHOLD_TRIM = 5 

# ุนุชุจุฉ ุฃููุง (ุดูุงููุฉ) ูููุต ุงูููุงุฆู ุจุนุฏ ุฅุถุงูุฉ ุงูุฅุทุงุฑ
# ูููุฉ 10 ููุงุณุจุฉ ูููู contour.py ุงูุฃุตูู
ALPHA_THRESHOLD_FINAL =200


# ----------------------------------------------------------------------
#                         ุงูุฏูุงู ุงููุณุงุนุฏุฉ (Helper Functions)
# ----------------------------------------------------------------------

# ุงุณุชุฎุฏุงู ุฏุงูุฉ ุนุงุฏูุฉ ุจุฏูุงู ูู Lambda ูู MM_TO_PIXELS ูุชุญุณูู ุงููุฑุงุกุฉ
def MM_TO_PIXELS(mm: float) -> int:
    """ุชุญููู ูููุฉ ูู ุงูููููุชุฑ ุฅูู ุจููุณูุงุช ุจูุงุกู ุนูู ูููุฉ DPI."""
    return round((mm / 25.4) * DPI)

def trim_transparent_edges_numpy(img: Image.Image, alpha_threshold: int) -> Image.Image:
    """
    ููุต ุงูุญูุงู ุงูุดูุงูุฉ ุงูุฒุงุฆุฏุฉ ุจุฏูุฉ ุจุงุณุชุฎุฏุงู ุนุชุจุฉ ุงูุฃููุง (Alpha Threshold).
    :param img: ุตูุฑุฉ PIL ุจุตูุบุฉ RGBA.
    :param alpha_threshold: ุนุชุจุฉ ููุงุฉ ุงูุฃููุง ูุชุญุฏูุฏ ุงููุญุชูู ุงููุฑุฆู.
    :return: ุตูุฑุฉ PIL ููุตูุตุฉ.
    """
    if img.mode != 'RGBA':
        img = img.convert('RGBA')
        
    np_img = np.array(img)
    alpha_channel = np_img[:, :, 3]

    # ุฅูุดุงุก ููุงุน ูููุญุชูู "ุงููุฑุฆู"
    mask = alpha_channel >= alpha_threshold
    
    # ุฅูุฌุงุฏ ุฅุญุฏุงุซูุงุช ุงููุญุชูู ุงููุฑุฆู
    coords = np.argwhere(mask)
    
    if coords.size == 0:
        # ุฅุฑุฌุงุน ุตูุฑุฉ ุดูุงูุฉ ุตุบูุฑุฉ ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนูู ูุญุชูู
        return Image.new("RGBA", (1, 1), (0, 0, 0, 0)) 

    # ุญุณุงุจ ุงููุฑุจุน ุงููุญูุท (Bounding Box)
    y_min, x_min = coords.min(axis=0)[:2]  
    y_max, x_max = coords.max(axis=0)[:2]  
    
    # ุตูุฏูู ุงููุต (left, upper, right, lower)
    bbox = (x_min, y_min, x_max + 1, y_max + 1)

    # ูุต ุงูุตูุฑุฉ ุงูุฃุตููุฉ
    return img.crop(bbox)


# ----------------------------------------------------------------------------------
## ุฏุงูุฉ ุงููุนุงูุฌุฉ ุงูุฑุฆูุณูุฉ ุงูููุนุฏูููุฉ: ุงููุต ุฃููุงูุ ุซู ุงูุฅุทุงุฑ
# ----------------------------------------------------------------------------------

def add_border_and_trim(input_path: str, output_path: str, border_width_mm: float, max_size_cm: float) -> bool:
    """
    ูููู ุจูุนุงูุฌุฉ ุงูุตูุฑุฉ: ูุต ุงูุญูุงูุ ุฅุถุงูุฉ ุฅุทุงุฑ ุฃุณูุฏ ุจุงุณุชุฎุฏุงู MaxFilterุ ูุงููุต ุงูููุงุฆู.
    
    :param input_path: ูุณุงุฑ ููู ุงูุตูุฑุฉ ุงููุฏุฎู.
    :param output_path: ูุณุงุฑ ููู ุงูุตูุฑุฉ ุงููุฎุฑุฌ.
    :param border_width_mm: ุณูู ุงูุฅุทุงุฑ ุงููุทููุจ ุจุงูููููุชุฑ.
    :param max_size_cm: ุงูุญุฌู ุงูุฃูุตู ุงููุณููุญ ุจู ุจุนุฏ ุงููุนุงูุฌุฉ.
    :return: True ุฅุฐุง ูุฌุญุช ุงูุนูููุฉุ False ุฅุฐุง ูุดูุช.
    """
    try:
        # ุชุฃููุฏ ุชุญููู ูููุฉ ุนุฑุถ ุงูุฅุทุงุฑ ุฅูู ุฑูู ุนุงุฆู
        border_width_mm = float(border_width_mm)

        # 1. ุงููุฑุงุกุฉ ูุงูุชูุธูู ุงูุฃููู: ุงูุชุญููู ุฅูู RGBA
        img = Image.open(input_path).convert('RGBA')
        
        # 2. ๐ ุงููุต ุงูุฏููู ููุฒูุงุฆุฏ ุงูุดูุงูุฉ ุฃููุงู
        img = trim_transparent_edges_numpy(img, ALPHA_THRESHOLD_TRIM)


        # 3. ุชุทุจูู ุงูุฅุทุงุฑ ุงูุฃุณูุฏ (ุจุงุณุชุฎุฏุงู MaxFilter)
        
        border_width_px = MM_TO_PIXELS(border_width_mm)
        if border_width_px <= 0: border_width_px = 1 # ูุถูู ุจููุณู ูุงุญุฏ ุนูู ุงูุฃูู

        # ูุญุชุงุฌ ูู MaxFilter ุจุญุฌู ุฃูุจุฑ ุจููุณู ูุงุญุฏ ูู ุถุนู ุนุฑุถ ุงูุฅุทุงุฑ
        filter_size = border_width_px * 2 + 1
        
        alpha_channel = img.split()[-1]
        
        # ุงุณุชุฎุฏุงู ูุฑุดุญ MaxFilter ูุชูุณูุน ุงูููุงุน Alpha
        dilated_alpha = alpha_channel.filter(ImageFilter.MaxFilter(size=filter_size))
        
        # ุงูุญุตูู ุนูู ุงูุฅุทุงุฑ ููุณู ุนู ุทุฑูู ุงููุฑู ุจูู ุงูููุงุน ุงูููุณุน ูุงูุฃุตูู
        border_mask = ImageChops.difference(dilated_alpha, alpha_channel)
        
        # ุฅูุดุงุก ุตูุฑุฉ ุจููู ุงูุฅุทุงุฑ (ุฃุณูุฏ)
        border_color_img = Image.new('RGBA', img.size, "black")
        
        # ูุณุชุฎุฏู ุงูููุงุน ูุฅูุดุงุก ุตูุฑุฉ ุงูุฅุทุงุฑ ููุท
        image_with_border = Image.new('RGBA', img.size)
        image_with_border = Image.composite(border_color_img, image_with_border, border_mask)
        
        # ุฏูุฌ ุงูุตูุฑุฉ ุงูุฃุตููุฉ ูุน ุงูุฅุทุงุฑ
        image_with_border = Image.alpha_composite(image_with_border, img)

        
        # 4. ุงููุต ุงูููุงุฆู
        # ูุฐุง ุงููุต ูุถูู ุฅุฒุงูุฉ ุงูุญูุงู ุงูุดูุงูุฉ ุฃู ุดุจู ุงูุดูุงูุฉ ุงูุชู ูุฏ ุชุธูุฑ ุจุนุฏ ุนูููุฉ ุฏูุฌ ุงูุฅุทุงุฑ
        final_img = trim_transparent_edges_numpy(image_with_border, ALPHA_THRESHOLD_FINAL)
        
        # ----------------------------------------------------
        # --- ูุธุงุฆู ุฅุถุงููุฉ ูุญุฐููุฉ (ุงูุชุฏููุฑ ูุชุญุฏูุฏ ุงูุญุฌู) ---
        # ----------------------------------------------------
        
        # 5. ุญูุธ ุงูุตูุฑุฉ ูุน ุชุถููู DPI
        dpi_value = (DPI, DPI) 
        final_img.save(output_path, 'PNG', dpi=dpi_value) 
        return True
        
    except Exception as e:
        # ุงุณุชุฎุฏุงู ุทุจุงุนุฉ ุงูุฎุทุฃ ุฅูู ุงููุฌุฑู ุงูููุงุณู ููุฎุทุฃ (stderr)
        print(f"ERROR_PROCESSING: Python script failed due to: {e}", file=sys.stderr) 
        return False

# ----------------------------------------------------------------------------------
## ุชูููุฐ ุงูุนูููุฉ ุงูุฑุฆูุณูุฉ ูุงุณุชูุจุงู ุงููุฏุฎูุงุช ูู ุณุทุฑ ุงูุฃูุงูุฑ
# ----------------------------------------------------------------------------------

if __name__ == "__main__":
    # ูุฌุจ ุฃู ูุณุชูุจู 4 ูุณุงุฆุท ุจุงูุฅุถุงูุฉ ูุงุณู ุงูููู ููุณู (ุฅุฌูุงูู 5)
    if len(sys.argv) < 5: 
        print("Usage: python contour.py <input_path> <output_path> <border_mm> <size_cm>", file=sys.stderr)
        sys.exit(1)

    input_path = sys.argv[1]
    output_path = sys.argv[2]
    border_width_mm = sys.argv[3] # ูุชู ุงุณุชูุจุงู ุญุฌู ุงูุฅุทุงุฑ ููุนุงูู ุซุงูุซ
    sticker_size_cm = sys.argv[4]

    # ุชูุฑูุฑ ุงููุนุงููุงุช ุงููุณุชููุฉ ุฅูู ุฏุงูุฉ ุงููุนุงูุฌุฉ
    if add_border_and_trim(input_path, output_path, border_width_mm, sticker_size_cm):
        # ุทุจุงุนุฉ ูุณุงุฑ ุงููุฎุฑุฌ ุนูุฏ ุงููุฌุงุญ (ููุง ุชุชููุน ุณูุฑุจุชุงุช ุงูุฑูุงูุช ุนุงุฏุฉู)
        print(output_path) 
    else:
        sys.exit(1)